---
title: プロジェクトをforkして修正入れて本家の変更とりこんで
date: 2015-10-04 00:44:44
tags: 未分類, 
---
2015/10/03のBTRON Club例会で興味深い発表がありましたね。

具体的な内容もさることながら、配布されたソースがね、<a href="http://axtls.sourceforge.net/" target="_blank">axTLS embedded SSL</a>、<a href="http://curl.haxx.se/" target="_blank">curl and libcurl</a>、<a href="http://www.digip.org/jansson/" target="_blank">jansson</a>、<a href="http://sourceforge.net/projects/liboauth/" target="_blank">liboauth</a>、libuuid、<a href="https://github.com/Dwii/Dropbox-C" target="_blank">Dwii/Dropbox-C</a>の超漢字移植版unixエミューレータ無しで動くよ、ですもんね。

配布は会員限定ですけど、自作のプログラムに使っても構わないってなわけで、ありがたいってなもんですよ。

無論、オープンソースの改変版なわけですから、それを再配布したって文句のあろうはずも無いっちゅーか、発表した本人に、再配布していい部分はきちんと確認済みです。

で、さてしかし、配布形式はtarballだったわけですよ。BTRON Club会員限定ページからダウンロードする。

まあ、単純に配布するだけであれば、別にイイんですけど、これ使って何か作ろうと思うと、やっぱバージョン管理ツールに突っ込みたいわけですよ。

で、ただ単にtarballを展開したやつをリポジトリに突っ込むんじゃなくて、大元のリポジトリと連携させて、開発元の更新を取り込んで、最新版に超漢字移植の差分を適用する、という運用をしたいわけですよ。

んだから
<ul>
	<li>大元のリポジトリをforkする</li>
	<li>超漢字用の修正を適用する</li>
	<li>大元のリポジトリに修正が入ったら取り込む</li>
	<li>rebaseか何かで最新版に対して超漢字用の修正を適用する</li>
</ul>

みたいな感じで運用したいわけでしてね。

で、まあforkだgit-svnだという操作は、やったことはあるけど、たまにしかやらないから、いつも操作分かんなくて調べまくるのよねー、っちゅーわけでそのメモです。

<h2>svn → git</h2>
gitも大分普及してきましたし、自分の周りの環境は大体gitになっちゃいましたが、それでもsvnが現役なプロジェクトはまだまだありますな。

ちゅーわけでまずはこちら　→　<a href="http://qiita.com/hidekuro/items/4727715fbda8f10b6b11" target="_blank">Qiita：git-svnでSVN→Gitへの移行をやってみたログ</a>

svnのリポジトリをgit化します。

まあ、大体この通りにやればいい感じ。途中の<pre>git push -u origin</pre>は<pre>git push -u origin master</pre>だった。バージョン違いかなあ？　自分は2.1.4。gitは便利だけど、バージョン毎に変更が色々入るから、ドキュメントの記述がどこまで適用できるか判断しづらいなあ。

一応<a href="https://osdn.jp/docs/SCM_Migration" target="_blank" title="コード管理システムの移行">osdnのヘルプページにも移行手順が書いてある</a>んだけど、これだけだと、svnのtagがgitのbranchになっちゃうのよね。上記のQiitaにはそれをどうにかする方法が書いてます。

んで、コミットユーザー名とかgit-svn-idをどうにかしたい場合は<a href="https://git-scm.com/book/ja/v1/Git%E3%81%A8%E3%81%9D%E3%81%AE%E4%BB%96%E3%81%AE%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%81%AE%E9%80%A3%E6%90%BA-Git-%E3%81%B8%E3%81%AE%E7%A7%BB%E8%A1%8C" target="_blank">本家の移行手順やね</a>。

ここまでの操作をすると、svnの内容をとりこんだgitリポジトリが、ホスティングサイトに送信されています。

んで、作成した後に、大元のsvnの差分をリモートに反映したい場合は → <a href="http://qiita.com/hikaruworld@github/items/0a67da8f5f2af2549c94" target="_blank">Qiita：git-svnを利用した運用を考える</a>　が参考になるかね。

今回の目的に必要な部分を抽出すると

<blockquote><ol><li>git svn rebase を用いて、メインSubversionの変更を取り込みます。</li><li>git pushで共用リポジトリにメインSubversionの変更をpushする。</li></ol></blockquote>

だね。一回、自分のマシンに、svn側の修正を取り込んで、gitのリモートに送信する、という感じ。

多分、ここからさらに、fork時に使ったtagの変換スクリプトをかける必要があると思う。まだ実際にやったことは無いんだけど。

<h2>git → git</h2>
まあこりゃ、よくあるパターンですな。git本体の機能というよりは、githubのおかげでメジャーになった運用方法っちゅーか。

大体は、修正を取り込んでもらうために、一旦フォークする、みたいな事例が多いようですが、今回は、自分の修正は送らず、大元の修正を取り込み続けつつ、自分の修正を適用し続ける感じ。

で、まずは、リポジトリの複製っちゅーか、fork。まあこれは省略。大体のホスティングサイトには、ボタン押すだけでできる機能があるから、それ使えばいいっちゅー話ね。

そしてこちらを参考に　→　<a href="http://qiita.com/xtetsuji/items/555a1ef19ed21ee42873" target="_blank">Qiita：GitHubでFork/cloneしたリポジトリを本家リポジトリに追従する</a>

<h2>移植コードを適用</h2>
これは、取り込み元がsvnでもgitでも同じ。っちゅーか、新しく作ったgitリポジトリに対する操作だからね。

まあ、普通にコミットしたりブランチ切ったりタグ打ったりするだけだけど。普通にgitでよく使う操作だから、説明とかはいいや。

運用ルールとしては、masterは大元と完全に同期しておいて、移植コードは、別のブランチにしてタグ打って、というあたりかねえ？

masterを更新したら、移植コードブランチから更にブランチ作って、そのブランチ上でリベースしてmasterを取り込み、タグを打つ、と。

基本的には、masterから何本も移植ブランチが生えていく感じ。移植ブランチの先に大元の修正コミットがつながることは無い、と。

……図にしなきゃわかりにくいけど、書くの面倒。

大元が更新されたら、多分、移植版の差分とコンフリクトしまくると思うので、修正入れることになるはず。

その時にさ、移植コードの先に、大元の差分を適用していったら、おそらくカオスになるんじゃないかなー。最悪コミットされた回数だけ、コンフリクトを解決しなくちゃならんと思う。

それなら、大元の更新の後に、移植コードの差分を適用して行くほうが、まだ手間はかからないと思う。

以前の<a href="http://ornse01.b.osdn.me/2014/07/26/mruby%e3%83%93%e3%83%ab%e3%83%89%e3%82%a8%e3%83%a9%e3%83%bc%e3%81%ae%e8%a7%a3%e6%b1%ba/" target="_blank">mrubyの時</a>も、そんな感じで運用を設計してます。……最新版の取り込みサボってるけど。次のバージョン番号更新の時にでもやるかねえ。

<h2>運用ルール</h2>

ここまで来たら後はルールづけ。名前の付け方とか。

<ul>
	<li>リリース版はタグ付け</li>
	<li>ブランチは作業用。基本はリモートにはプッシュしたくないけど、submoduleとか考えたらしょうがない。要らなくなったら消す</li>
	<li>大元のタグから修正を適用する。何も考えずにmasterのheadに適用したりしない。</li>
	<li>タグ名は、大元のタグ名の後に<code>-brightv</code>とつける。まあもっといい名前があればそれでもいいんだけど、思いつかないし。</li>
</ul>

基本は、リモートリポジトリは、公開用の綺麗な状態にしておくってことで。

好き勝手やりたいときは、さらにforkすればいいしな。

まあ、それにしても、リポジトリのミラーリングは自動化したいのう。いや、cron使うとかフックスクリプト書いてとかは、分かるんだけどさ。自分のPCに置いとくんじゃなくて、どっかのサーバー上でやってて欲しいっちゅーか、そういうサービス無いもんかねえ？