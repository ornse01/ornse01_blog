---
title: mrubyのクロスコンパイル
date: 2014-07-17 02:21:51
tags: mruby_brightv_hello, 
---
さて、なにはなくともまずビルド。

とりあえず、超漢字開発環境のサンプルアプリケーションを踏襲して、以下のようなディレクトリ構成にしようと思うのですよ。

<code> src/Makefile　←ソースディレクトリ
　　hoge.c
　　fuga.c
　　build_config.rb ←mrubyのビルド設定
　　mruby/　　←mruby本体のソース
pcat/　　　　　←ビルド用ディレクトリ
</code>

ソース用とビルド用が分かれるいつものやつですな。mruby本体はリポジトリからチェックアウトしたそのまんまで、設定ファイルとかは外側に置いて。

で、Makefileからこんな感じで、mrubyのビルド用のコマンド呼べばいいかなあー、と。

<code> mruby_build:
　　ruby ../src/mruby/minirake MRUBY_CONFIG=../src/build_config.rb MRUBY_BUILD_DIR=./mruby -f ../src/mruby/Rakefile
</code>

んで、まあとりあえずディレクトリ構成だけ作っておいて、まずホスト環境でビルドしてみようか、と思ったのですよ。

build_config.rbを元のやつコピペして使えば、デフォルトのやつがビルドされるはずでしょ？

だめでした。

何がダメってエラーが沢山でるのですよ。

ホスト環境でコンパイルするはずが、超漢字開発環境のgccを呼んでいて、んでも何もせずにコンパイラだけ入れ替わっていても当然うまくいくはずがない、と。

いやね、超漢字開発環境のサンプルのMakefileを元にしたもの使ってるんだけど、それが参照しているmakerulesが"CC"って変数にコンパイラを入れているのですよ。

んで、Makefile内の変数に代入すると、環境変数にも影響するっぽい。

mrubyのビルドツールでは、環境変数"CC"でコンパイラを選択していた。

なので、超漢字開発環境のMakefileからmrubyのビルドツール呼ぶと、環境変数"CC"に、超漢字開発環境のgccが入った状態で実行されて、コンパイル出来ねえ、と、いうわけですな。

まあ、よくあるunix系のソフトやライブラリを超漢字向けに移植する時は、環境変数を変えてビルドしてみるとかやることもあるんだけど、今回はそういうわけにはいかないのですよ。

くわしくは<a title="mruby/mruby doc/compile/README.md" href="https://github.com/mruby/mruby/blob/e43341b4607a2596ba2b6542acc8406912cf289a/doc/compile/README.md" target="_blank">mrubyのドキュメント</a>を見てほしいのですけど、mrubyはクロスコンパイルするときも、一旦ホスト環境でもビルドするのですよ。

ライブラリとmrbcコマンドってやつ。

んで、rbファイルを静的に組み込むときはそのmrbcコマンドを使って、あらかじめバイトコードにしておいてバイナリに埋め込むという手順を踏んでいるわけです。

クロスコンパイルする時でも、ホスト環境のmrbcコマンドを作って、それを使ってバイトコードにして、ターゲットのバイナリに埋め込んでいるのですね。

んだから、ホスト環境のgccとクロス開発環境のgccはどうにかして識別できなきゃいけないわけです。

しばらくいじってみたけど、環境変数が書き換わるとどうも意図したように動かせないっちゅーか、挙動がいまいち把握しきれないっちゅーか。build_config.rbで上書きできそうな気はするのだが、うまくいかないし。

どうも色々面倒そうなので、思い切って、超漢字アプリケーションのビルドに、Makefileをやめてrakeを使ってみることにしました。

つづく。